// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoLoad.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/CloseGateOne.h"
#include "Commands/CloseGateTwo.h"
#include "Commands/DoNothing.h"
#include "Commands/DoNothingTwo.h"
#include "Commands/DriveWithJoystick.h"
#include "Commands/ElevatorDown.h"
#include "Commands/ElevatorUp.h"
#include "Commands/GateOne.h"
#include "Commands/GateTwo.h"
#include "Commands/LoaderBack.h"
#include "Commands/LoaderForward.h"
#include "Commands/OpenGateOne.h"
#include "Commands/OpenGateTwo.h"
#include "Commands/OperatorControlBack.h"
#include "Commands/OperatorControlForward.h"
#include "Commands/RunLaunchingWheel.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	shootingStick = new Joystick(2);
	
	gateTwoButton = new JoystickButton(shootingStick, 10);
	gateTwoButton->WhenPressed(new GateTwo());
	gateOneButton = new JoystickButton(shootingStick, 11);
	gateOneButton->WhenPressed(new GateOne());
	loaderOperatorControlBack = new JoystickButton(shootingStick, 7);
	loaderOperatorControlBack->WhileHeld(new OperatorControlBack());
	loaderOperatorControlForward = new JoystickButton(shootingStick, 6);
	loaderOperatorControlForward->WhileHeld(new OperatorControlForward());
	elevatorDownButton = new JoystickButton(shootingStick, 5);
	elevatorDownButton->WhileHeld(new ElevatorDown());
	elevatorUpButton = new JoystickButton(shootingStick, 4);
	elevatorUpButton->WhileHeld(new ElevatorUp());
	feedFrisbee = new JoystickButton(shootingStick, 2);
	feedFrisbee->WhenPressed(new AutoLoad());
	trigger = new JoystickButton(shootingStick, 1);
	trigger->WhileHeld(new RunLaunchingWheel());
	driverStick = new Joystick(1);
	
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
	SmartDashboard::PutData("DriveWithJoystick", new DriveWithJoystick());
	SmartDashboard::PutData("RunLaunchingWheel", new RunLaunchingWheel());
	SmartDashboard::PutData("ElevatorUp", new ElevatorUp());
	SmartDashboard::PutData("ElevatorDown", new ElevatorDown());
	SmartDashboard::PutData("LoaderForward", new LoaderForward());
	SmartDashboard::PutData("AutoLoad", new AutoLoad());
	SmartDashboard::PutData("LoaderBack", new LoaderBack());
	SmartDashboard::PutData("OperatorControlForward", new OperatorControlForward());
	SmartDashboard::PutData("OperatorControlBack", new OperatorControlBack());
	SmartDashboard::PutData("OpenGateOne", new OpenGateOne());
	SmartDashboard::PutData("CloseGateOne", new CloseGateOne());
	SmartDashboard::PutData("OpenGateTwo", new OpenGateTwo());
	SmartDashboard::PutData("CloseGateTwo", new CloseGateTwo());
	SmartDashboard::PutData("GateTwo", new GateTwo());
	SmartDashboard::PutData("GateOne", new GateOne());
	SmartDashboard::PutData("DoNothing", new DoNothing());
	SmartDashboard::PutData("DoNothingTwo", new DoNothingTwo());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
Joystick* OI::getShootingStick() {
	return shootingStick;
}
Joystick* OI::getDriverStick() {
	return driverStick;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
